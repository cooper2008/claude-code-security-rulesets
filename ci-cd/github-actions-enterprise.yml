# GitHub Actions Workflow for Enterprise Claude Code Security Distribution
# Automatically deploys security configurations to 1000+ developers

name: Claude Code Enterprise Deployment

on:
  push:
    branches: [ main, release/* ]
    paths:
      - 'security-configs/**'
      - 'templates/**'
      - '.github/workflows/claude-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'security-configs/**'
      - 'templates/**'
  schedule:
    # Weekly deployment validation
    - cron: '0 9 * * MON'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      strategy:
        description: 'Deployment strategy'
        required: true
        default: 'canary'
        type: choice
        options:
          - immediate
          - canary
          - blue-green
          - rolling
      parallelism:
        description: 'Maximum concurrent deployments'
        required: false
        default: '50'
      dry_run:
        description: 'Dry run (preview only)'
        type: boolean
        default: false
      target_filters:
        description: 'Target filters (e.g., department=engineering,team=frontend)'
        required: false

env:
  NODE_VERSION: '18'
  CLAUDE_CONFIG_VERSION: '2.0'
  DEPLOYMENT_TIMEOUT: '3600' # 1 hour
  MAX_PARALLEL_DEPLOYMENTS: 100

jobs:
  # Validation phase
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      config-hash: ${{ steps.hash.outputs.hash }}
      validation-passed: ${{ steps.validate.outputs.passed }}
      target-count: ${{ steps.targets.outputs.count }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm install -g @claude/enterprise-deploy

      - name: Validate Security Configuration
        id: validate
        run: |
          echo "üîç Validating security configuration..."
          
          # Validate all configuration files
          for config in security-configs/*.json; do
            echo "Validating $config..."
            claude-code validate "$config" --strict --format json > "validation-${{github.run_id}}-$(basename $config).json"
          done
          
          # Check for validation failures
          if grep -q '"isValid": false' validation-*.json; then
            echo "‚ùå Configuration validation failed"
            cat validation-*.json
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Configuration validation passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Calculate Configuration Hash
        id: hash
        run: |
          HASH=$(find security-configs/ -name "*.json" -exec cat {} \; | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Configuration hash: $HASH"

      - name: Discover Deployment Targets
        id: targets
        env:
          LDAP_SERVER: ${{ secrets.LDAP_SERVER }}
          LDAP_USER: ${{ secrets.LDAP_USER }}
          LDAP_PASSWORD: ${{ secrets.LDAP_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          K8S_CONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          echo "üéØ Discovering deployment targets..."
          
          # Auto-discover targets
          claude-code discover-targets \
            --output targets-discovered.json \
            --include-ldap \
            --include-aws \
            --include-k8s \
            --filters "${{ github.event.inputs.target_filters || 'environment!=production' }}"
          
          TARGET_COUNT=$(jq length targets-discovered.json)
          echo "count=$TARGET_COUNT" >> $GITHUB_OUTPUT
          echo "Discovered $TARGET_COUNT deployment targets"
          
          # Validate target connectivity (sample)
          echo "üîç Validating target connectivity (sample of 10)..."
          claude-code validate-targets \
            --targets targets-discovered.json \
            --sample 10 \
            --timeout 30

      - name: Upload Validation Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-results
          path: |
            validation-*.json
            targets-discovered.json
          retention-days: 30

  # Security scan phase
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.validation-passed == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Security Scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'security-configs/security-scan.sarif'

      - name: Check for Security Issues
        run: |
          echo "üîí Scanning for security vulnerabilities..."
          
          # Custom security checks for Claude Code configurations
          if grep -r "allow.*\*" security-configs/; then
            echo "‚ö†Ô∏è Warning: Wildcard permissions detected"
          fi
          
          if grep -r "deny.*" security-configs/ | wc -l | awk '{if ($1 < 10) exit 1}'; then
            echo "‚ö†Ô∏è Warning: Less than 10 deny rules - consider more restrictive configuration"
          fi

  # Staging deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: |
      needs.validate.outputs.validation-passed == 'true' && 
      (github.event_name == 'push' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://dashboard.company.com/claude-deploy/staging
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Deployment Environment
        run: |
          # Install deployment tools
          curl -fsSL https://get.claude.ai/enterprise-deploy.sh | bash
          echo "$HOME/.claude/bin" >> $GITHUB_PATH

      - name: Download Validation Artifacts
        uses: actions/download-artifact@v4
        with:
          name: validation-results

      - name: Configure Enterprise Deployment
        env:
          CLAUDE_ENTERPRISE_KEY: ${{ secrets.CLAUDE_ENTERPRISE_KEY }}
          DEPLOYMENT_WEBHOOK: ${{ secrets.STAGING_WEBHOOK }}
        run: |
          echo "üöÄ Configuring enterprise deployment for staging..."
          
          # Configure authentication
          claude-enterprise-deploy config set \
            --api-key "$CLAUDE_ENTERPRISE_KEY" \
            --environment staging \
            --webhook-url "$DEPLOYMENT_WEBHOOK"

      - name: Execute Staged Deployment
        id: deploy
        env:
          PARALLELISM: ${{ github.event.inputs.parallelism || '20' }}
          STRATEGY: ${{ github.event.inputs.strategy || 'canary' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          echo "üöÄ Starting staged deployment..."
          
          DEPLOY_ARGS=(
            --config security-configs/staging.json
            --targets targets-discovered.json
            --strategy "$STRATEGY"
            --parallelism "$PARALLELISM"
            --timeout 1800
            --monitor
          )
          
          if [ "$DRY_RUN" == "true" ]; then
            DEPLOY_ARGS+=(--dry-run)
            echo "üîç Performing dry run deployment"
          fi
          
          # Execute deployment
          claude-enterprise-deploy "${DEPLOY_ARGS[@]}" | tee deployment.log
          
          # Extract deployment ID for monitoring
          DEPLOYMENT_ID=$(grep "Deployment ID:" deployment.log | awk '{print $3}')
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: Monitor Deployment Progress
        if: github.event.inputs.dry_run != 'true'
        env:
          DEPLOYMENT_ID: ${{ steps.deploy.outputs.deployment-id }}
        run: |
          echo "üìä Monitoring deployment progress..."
          
          # Monitor deployment until completion
          timeout 30m claude-enterprise-deploy monitor \
            --deployment-id "$DEPLOYMENT_ID" \
            --interval 30 \
            --format github-actions

      - name: Upload Deployment Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-deployment-logs
          path: |
            deployment.log
            *.deployment.json
          retention-days: 90

  # Production deployment (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' ||
      github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://dashboard.company.com/claude-deploy/production
    
    steps:
      - name: Production Deployment Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: devops-team,security-team
          minimum-approvals: 2
          issue-title: "Claude Code Production Deployment - ${{ github.sha }}"
          issue-body: |
            **Production Deployment Request**
            
            - **Configuration Hash**: ${{ needs.validate.outputs.config-hash }}
            - **Target Count**: ${{ needs.validate.outputs.target-count }}
            - **Deployment Strategy**: ${{ github.event.inputs.strategy || 'canary' }}
            - **Commit**: ${{ github.sha }}
            
            **Validation Results**:
            - ‚úÖ Configuration validation passed
            - ‚úÖ Security scan completed
            - ‚úÖ Staging deployment successful
            
            Please review and approve for production deployment.

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Production Deployment
        run: |
          curl -fsSL https://get.claude.ai/enterprise-deploy.sh | bash
          echo "$HOME/.claude/bin" >> $GITHUB_PATH

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: validation-results

      - name: Execute Production Deployment
        env:
          CLAUDE_ENTERPRISE_KEY: ${{ secrets.CLAUDE_ENTERPRISE_KEY }}
          PRODUCTION_WEBHOOK: ${{ secrets.PRODUCTION_WEBHOOK }}
          PARALLELISM: ${{ github.event.inputs.parallelism || '50' }}
        run: |
          echo "üöÄ Starting production deployment..."
          
          # Configure for production
          claude-enterprise-deploy config set \
            --api-key "$CLAUDE_ENTERPRISE_KEY" \
            --environment production \
            --webhook-url "$PRODUCTION_WEBHOOK"
          
          # Execute with enhanced safety measures
          claude-enterprise-deploy \
            --config security-configs/production.json \
            --targets targets-discovered.json \
            --strategy blue-green \
            --parallelism "$PARALLELISM" \
            --timeout 3600 \
            --monitor \
            --health-checks \
            --rollback-on-failure \
            --require-confirmation

  # Post-deployment validation
  post-deploy-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Health Check Validation
        run: |
          echo "üîç Performing post-deployment health checks..."
          
          # Wait for deployment to stabilize
          sleep 300
          
          # Run comprehensive health checks
          claude-enterprise-deploy health-check \
            --environment production \
            --comprehensive \
            --timeout 600

      - name: Configuration Compliance Check
        run: |
          echo "üìã Validating configuration compliance..."
          
          # Sample targets for compliance verification
          claude-enterprise-deploy verify-compliance \
            --environment production \
            --sample 100 \
            --report-format json > compliance-report.json

      - name: Generate Deployment Report
        run: |
          echo "üìä Generating deployment report..."
          
          claude-enterprise-deploy report \
            --environment production \
            --format markdown > DEPLOYMENT_REPORT.md
          
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          cat DEPLOYMENT_REPORT.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-report
          path: |
            compliance-report.json
            DEPLOYMENT_REPORT.md
          retention-days: 365

  # Notification phase
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-validation]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Claude Code Enterprise Deployment ${{ job.status }}
            
            **Environment**: Production
            **Targets**: ${{ needs.validate.outputs.target-count }}
            **Config Hash**: ${{ needs.validate.outputs.config-hash }}
            **Commit**: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: deploy-${{ github.run_number }}
          release_name: Claude Code Deployment ${{ github.run_number }}
          body: |
            Automated deployment of Claude Code security configurations.
            
            **Deployment Details:**
            - Configuration Hash: ${{ needs.validate.outputs.config-hash }}
            - Targets Deployed: ${{ needs.validate.outputs.target-count }}
            - Deployment Strategy: ${{ github.event.inputs.strategy || 'canary' }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false