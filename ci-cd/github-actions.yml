name: Claude Code Security Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: 18

jobs:
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        fi
        
    - name: Install Claude Code
      run: npm install -g claude-code-security-rulesets
      
    - name: Validate Security Configuration
      run: |
        claude-code validate \
          --config .claude-code.json \
          --format json \
          --output security-report.json \
          --fail-on-warnings
          
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-validation-report
        path: security-report.json
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportContent = fs.readFileSync('security-report.json', 'utf8');
            const report = JSON.parse(reportContent);
            
            let comment = '## 🔒 Claude Code Security Validation\n\n';
            
            if (report.isValid) {
              comment += '✅ **Security validation passed!**\n\n';
            } else {
              comment += '❌ **Security validation failed!**\n\n';
              comment += `**Errors:** ${report.errors.length}\n`;
              comment += `**Warnings:** ${report.warnings.length}\n`;
              comment += `**Conflicts:** ${report.conflicts.length}\n\n`;
            }
            
            comment += `**Performance:** ${report.performance.validationTime}ms\n`;
            comment += `**Rules processed:** ${report.performance.rulesProcessed}\n\n`;
            
            if (report.errors.length > 0) {
              comment += '### ❌ Critical Errors\n';
              report.errors.forEach(error => {
                comment += `- **${error.type}**: ${error.message}\n`;
              });
              comment += '\n';
            }
            
            if (report.warnings.length > 0) {
              comment += '### ⚠️ Warnings\n';
              report.warnings.forEach(warning => {
                comment += `- **${warning.type}**: ${warning.message}\n`;
              });
              comment += '\n';
            }
            
            if (report.suggestions.length > 0) {
              comment += '### 💡 Suggestions\n';
              report.suggestions.forEach(suggestion => {
                comment += `- ${suggestion.message}\n`;
              });
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Failed to read or parse security report:', error);
          }
          
    - name: Check validation result
      run: |
        if [ ! -f security-report.json ]; then
          echo "Security report not found, validation may have failed"
          exit 1
        fi
        
        # Check if validation passed
        if ! jq -e '.isValid' security-report.json > /dev/null; then
          echo "Security validation failed!"
          echo "Review the security report for details"
          exit 1
        fi
        
        echo "✅ Security validation passed successfully!"

  deployment-gate:
    name: Deployment Gate
    needs: security-validation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Security Gate Passed
      run: |
        echo "🚀 Security validation passed - deployment can proceed"
        echo "This job can be used as a dependency for deployment jobs"