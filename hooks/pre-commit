#!/bin/bash
# Claude Code Security Validation Hook - pre-commit
# Generated by Claude Code Security Rulesets Generator
# This hook performs security validation before commits

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CLAUDE_CODE_CMD="claude-code-validator"
CONFIG_FILE=".claude-code.json"
FAST_MODE=false
QUIET_MODE=false
BYPASS_FLAG="--no-verify"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --fast)
      FAST_MODE=true
      shift
      ;;
    --quiet)
      QUIET_MODE=true
      shift
      ;;
    --config)
      CONFIG_FILE="$2"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

# Function to print colored output
print_status() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo -e "${BLUE}$1${NC}"
    fi
}

print_error() {
    echo -e "${RED}$1${NC}" >&2
}

print_success() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo -e "${GREEN}$1${NC}"
    fi
}

print_warning() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo -e "${YELLOW}$1${NC}"
    fi
}

print_header() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë                Claude Code Security Validation                ‚ïë${NC}"
        echo -e "${BLUE}‚ïë                      Pre-Commit Hook                          ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
    fi
}

# Check for bypass flag in git commit arguments
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    # Check the last commit message or environment for bypass flag
    if echo "$GIT_PARAMS" | grep -q "\--no-verify\|\--bypass-validation"; then
        print_warning "‚ö†Ô∏è  Security validation bypassed via git commit $BYPASS_FLAG!"
        print_warning "This should only be used in emergencies."
        print_warning "Consider fixing security issues instead of bypassing them."
        exit 0
    fi
fi

print_header

# Check if Claude Code validator is available
if ! command -v $CLAUDE_CODE_CMD &> /dev/null; then
    print_error "‚ùå Claude Code validator not found."
    print_error ""
    print_error "Please install Claude Code Security Rulesets:"
    print_error "  npm install -g claude-code-security-rulesets"
    print_error ""
    print_error "Or set CLAUDE_CODE_CMD environment variable to the correct path."
    print_error ""
    print_error "Emergency bypass: git commit $BYPASS_FLAG"
    exit 1
fi

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
if [ $? -ne 0 ]; then
    print_error "‚ùå Not in a Git repository"
    exit 1
fi

cd "$REPO_ROOT"

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    print_warning "‚ö†Ô∏è  No Claude Code configuration found ($CONFIG_FILE)"
    print_warning "Using default security rules..."
    print_warning ""
    print_status "üí° To customize security rules, run: claude-code init"
    print_status ""
fi

# Get list of files being committed
STAGED_FILES=$(git diff --cached --name-only)

if [ -z "$STAGED_FILES" ]; then
    print_status "üìù No staged files to validate."
    exit 0
fi

print_status "üîç Analyzing staged files for security validation..."

# Check for sensitive files in the staging area
SENSITIVE_FILES=$(echo "$STAGED_FILES" | grep -E "\.(env|key|pem|p12|pfx)$|\.secret|\.private|password|secret|credential|token" || true)
if [ -n "$SENSITIVE_FILES" ]; then
    print_warning ""
    print_warning "‚ö†Ô∏è  SENSITIVE FILES DETECTED IN COMMIT:"
    print_warning ""
    echo "$SENSITIVE_FILES" | while read file; do
        print_warning "    üîê $file"
    done
    print_warning ""
    print_warning "These files may contain sensitive information!"
    print_warning "Consider using:"
    print_warning "  ‚Ä¢ .gitignore to exclude them permanently"
    print_warning "  ‚Ä¢ git-secret or similar tools for encrypted storage"
    print_warning "  ‚Ä¢ Environment variables for configuration"
    print_warning ""
    
    # Give user a chance to abort
    if [ "$QUIET_MODE" != "true" ]; then
        echo -n "Continue with commit? (y/N): "
        read -r CONTINUE
        if [[ ! "$CONTINUE" =~ ^[Yy]$ ]]; then
            print_error "‚ùå Commit aborted by user"
            exit 1
        fi
    fi
fi

# Check for large files that might be accidentally committed
LARGE_FILES=$(echo "$STAGED_FILES" | xargs -I {} sh -c 'if [ -f "{}" ]; then stat -f%z "{}" 2>/dev/null || stat -c%s "{}" 2>/dev/null || echo 0; fi' | awk '$1 > 10485760 {print NR}' || true)
if [ -n "$LARGE_FILES" ]; then
    print_warning "‚ö†Ô∏è  Large files detected (>10MB). Consider using Git LFS."
fi

# Prepare validation command
VALIDATION_CMD="$CLAUDE_CODE_CMD validate"

if [ -f "$CONFIG_FILE" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --config $CONFIG_FILE"
fi

if [ "$FAST_MODE" = "true" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --fast"
fi

if [ "$QUIET_MODE" = "true" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --quiet"
fi

# Add pre-commit specific flags
VALIDATION_CMD="$VALIDATION_CMD --hook-type pre-commit --staged-files"

# Show what files are being validated
FILE_COUNT=$(echo "$STAGED_FILES" | wc -l | tr -d ' ')
print_status "üìä Validating $FILE_COUNT staged file(s)..."

if [ "$QUIET_MODE" != "true" ]; then
    echo "$STAGED_FILES" | head -5 | while read file; do
        print_status "    üìÑ $file"
    done
    
    if [ "$FILE_COUNT" -gt 5 ]; then
        print_status "    ... and $((FILE_COUNT - 5)) more files"
    fi
    echo
fi

print_status "üõ°Ô∏è  Running Claude Code security validation..."

# Execute validation with proper error handling
VALIDATION_START=$(date +%s)

if eval "$VALIDATION_CMD"; then
    VALIDATION_END=$(date +%s)
    VALIDATION_TIME=$((VALIDATION_END - VALIDATION_START))
    
    print_success ""
    print_success "‚úÖ SECURITY VALIDATION PASSED!"
    print_success ""
    print_status "üìà Validation completed in ${VALIDATION_TIME}s"
    
    # Additional success information
    if [ -f ".claude-code-validation-report.json" ]; then
        if command -v jq &> /dev/null; then
            RULES_PROCESSED=$(jq -r '.performance.rulesProcessed // "unknown"' .claude-code-validation-report.json 2>/dev/null || echo "unknown")
            print_status "üìã Security rules processed: $RULES_PROCESSED"
        fi
    fi
    
    print_success ""
    print_success "üöÄ Your commit meets all security requirements!"
    print_success "   Proceeding with commit..."
    
    exit 0
else
    VALIDATION_EXIT_CODE=$?
    VALIDATION_END=$(date +%s)
    VALIDATION_TIME=$((VALIDATION_END - VALIDATION_START))
    
    print_error ""
    print_error "‚ùå SECURITY VALIDATION FAILED!"
    print_error ""
    print_error "üö® The pre-commit operation has been blocked due to security policy violations."
    print_error ""
    
    # Show validation time even on failure for debugging
    print_error "‚è±Ô∏è  Validation completed in ${VALIDATION_TIME}s"
    
    # Provide helpful information about the failure
    if [ -f ".claude-code-validation-report.json" ]; then
        if command -v jq &> /dev/null; then
            ERROR_COUNT=$(jq -r '.errors | length' .claude-code-validation-report.json 2>/dev/null || echo "unknown")
            WARNING_COUNT=$(jq -r '.warnings | length' .claude-code-validation-report.json 2>/dev/null || echo "unknown")
            
            if [ "$ERROR_COUNT" != "unknown" ] && [ "$ERROR_COUNT" != "null" ]; then
                print_error "üî• Critical errors: $ERROR_COUNT"
            fi
            if [ "$WARNING_COUNT" != "unknown" ] && [ "$WARNING_COUNT" != "null" ]; then
                print_error "‚ö†Ô∏è  Warnings: $WARNING_COUNT"
            fi
        fi
    fi
    
    print_error ""
    print_error "üìã TO FIX THIS ISSUE:"
    print_error "   1. Review the security errors shown above"
    print_error "   2. Update your .claude-code.json configuration"
    print_error "   3. Remove or modify problematic patterns"
    print_error "   4. Re-stage your changes and commit again"
    print_error ""
    print_error "üìö FOR HELP:"
    print_error "   ‚Ä¢ Run: claude-code validate --help"
    print_error "   ‚Ä¢ Check documentation: https://claude-code-docs.com"
    print_error "   ‚Ä¢ Review configuration: cat .claude-code.json"
    print_error ""
    print_error "üö® EMERGENCY BYPASS (use with extreme caution):"
    print_error "   git commit $BYPASS_FLAG"
    print_error ""
    print_warning "‚ö†Ô∏è  WARNING: Bypassing security validation may introduce vulnerabilities!"
    print_error ""
    
    exit $VALIDATION_EXIT_CODE
fi