#!/bin/bash
# Claude Code Security Validation Hook - pre-push
# Generated by Claude Code Security Rulesets Generator
# This hook performs security validation before pushing to remote

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
CLAUDE_CODE_CMD="claude-code-validator"
CONFIG_FILE=".claude-code.json"
FAST_MODE=false
QUIET_MODE=false
STRICT_MODE=false
BYPASS_FLAG="--no-verify"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --fast)
      FAST_MODE=true
      shift
      ;;
    --quiet)
      QUIET_MODE=true
      shift
      ;;
    --strict)
      STRICT_MODE=true
      shift
      ;;
    --config)
      CONFIG_FILE="$2"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

# Function to print colored output
print_status() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo -e "${BLUE}$1${NC}"
    fi
}

print_error() {
    echo -e "${RED}$1${NC}" >&2
}

print_success() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo -e "${GREEN}$1${NC}"
    fi
}

print_warning() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo -e "${YELLOW}$1${NC}"
    fi
}

print_critical() {
    echo -e "${PURPLE}$1${NC}" >&2
}

print_header() {
    if [ "$QUIET_MODE" != "true" ]; then
        echo
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë                Claude Code Security Validation                ‚ïë${NC}"
        echo -e "${BLUE}‚ïë                       Pre-Push Hook                           ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
    fi
}

print_header

# Check if Claude Code validator is available
if ! command -v $CLAUDE_CODE_CMD &> /dev/null; then
    print_error "‚ùå Claude Code validator not found."
    print_error ""
    print_error "Please install Claude Code Security Rulesets:"
    print_error "  npm install -g claude-code-security-rulesets"
    print_error ""
    print_error "Or set CLAUDE_CODE_CMD environment variable to the correct path."
    print_error ""
    print_error "Emergency bypass: git push $BYPASS_FLAG"
    exit 1
fi

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
if [ $? -ne 0 ]; then
    print_error "‚ùå Not in a Git repository"
    exit 1
fi

cd "$REPO_ROOT"

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    print_warning "‚ö†Ô∏è  No Claude Code configuration found ($CONFIG_FILE)"
    print_warning "Using default security rules with enhanced protection for push operations..."
    print_status ""
fi

# Get information about what's being pushed
CURRENT_BRANCH=""
REMOTE_BRANCH=""
PROTECTED_BRANCHES="main master production release"

# Read push information from stdin
while read local_ref local_sha remote_ref remote_sha; do
    if [ "$local_sha" != "0000000000000000000000000000000000000000" ]; then
        CURRENT_BRANCH=$(echo "$local_ref" | sed 's|refs/heads/||')
        REMOTE_BRANCH=$(echo "$remote_ref" | sed 's|refs/heads/||')
        break
    fi
done

# If no branch info from stdin, get current branch
if [ -z "$CURRENT_BRANCH" ]; then
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
fi

print_status "üöÄ Preparing to push branch: $CURRENT_BRANCH"

# Check if pushing to protected branch
IS_PROTECTED=false
for protected in $PROTECTED_BRANCHES; do
    if [ "$CURRENT_BRANCH" = "$protected" ] || [ "$REMOTE_BRANCH" = "$protected" ]; then
        IS_PROTECTED=true
        break
    fi
done

if [ "$IS_PROTECTED" = "true" ]; then
    STRICT_MODE=true
    print_critical ""
    print_critical "üõ°Ô∏è  PROTECTED BRANCH DETECTED: $CURRENT_BRANCH"
    print_critical "üîí Enhanced security validation will be applied"
    print_critical ""
fi

# Check for uncommitted changes
UNCOMMITTED_CHANGES=$(git status --porcelain)
if [ -n "$UNCOMMITTED_CHANGES" ]; then
    print_warning "‚ö†Ô∏è  Warning: You have uncommitted changes"
    print_warning "Consider committing all changes before pushing"
    print_warning ""
fi

# Get commits being pushed
COMMITS_TO_PUSH=""
if git rev-parse --verify @{u} >/dev/null 2>&1; then
    COMMITS_TO_PUSH=$(git rev-list --count @{u}..HEAD 2>/dev/null || echo "unknown")
    if [ "$COMMITS_TO_PUSH" != "unknown" ] && [ "$COMMITS_TO_PUSH" -gt 0 ]; then
        print_status "üìä Pushing $COMMITS_TO_PUSH new commit(s)"
        
        # Show commit summary
        if [ "$QUIET_MODE" != "true" ] && [ "$COMMITS_TO_PUSH" -le 5 ]; then
            print_status ""
            print_status "Recent commits being pushed:"
            git log --oneline @{u}..HEAD | head -5 | while read line; do
                print_status "    üìù $line"
            done
            print_status ""
        fi
    fi
else
    print_status "üìä First push to remote or no upstream branch set"
fi

# Check for potential secrets in recent commits
print_status "üîç Scanning recent commits for potential secrets..."

# Get files changed in commits being pushed
CHANGED_FILES=""
if git rev-parse --verify @{u} >/dev/null 2>&1; then
    CHANGED_FILES=$(git diff --name-only @{u}..HEAD 2>/dev/null || echo "")
else
    # First push - check all files
    CHANGED_FILES=$(git ls-files)
fi

if [ -n "$CHANGED_FILES" ]; then
    # Check for sensitive files
    SENSITIVE_FILES=$(echo "$CHANGED_FILES" | grep -E "\.(env|key|pem|p12|pfx)$|\.secret|\.private|password|secret|credential|token|\.ssh|id_rsa|id_dsa" || true)
    
    if [ -n "$SENSITIVE_FILES" ]; then
        print_error ""
        print_error "üö® CRITICAL: SENSITIVE FILES IN PUSH HISTORY!"
        print_error ""
        echo "$SENSITIVE_FILES" | while read file; do
            print_error "    üîê $file"
        done
        print_error ""
        print_error "These files may contain secrets and should NOT be pushed to remote!"
        print_error ""
        print_error "TO FIX:"
        print_error "  1. Remove files: git rm --cached <file>"
        print_error "  2. Add to .gitignore"
        print_error "  3. Consider using git-secret or environment variables"
        print_error "  4. If already committed, use: git filter-branch or BFG Repo-Cleaner"
        print_error ""
        print_error "Emergency bypass: git push $BYPASS_FLAG (NOT RECOMMENDED)"
        print_error ""
        exit 1
    fi
    
    # Check for large files
    LARGE_FILES=""
    if [ -n "$CHANGED_FILES" ]; then
        LARGE_FILES=$(echo "$CHANGED_FILES" | xargs -I {} sh -c 'if [ -f "{}" ]; then size=$(stat -f%z "{}" 2>/dev/null || stat -c%s "{}" 2>/dev/null || echo 0); if [ "$size" -gt 52428800 ]; then echo "{}"; fi; fi' | head -5)
    fi
    
    if [ -n "$LARGE_FILES" ]; then
        print_warning ""
        print_warning "‚ö†Ô∏è  Large files detected (>50MB):"
        echo "$LARGE_FILES" | while read file; do
            print_warning "    üì¶ $file"
        done
        print_warning ""
        print_warning "Consider using Git LFS for large files"
        print_warning ""
    fi
fi

# Prepare validation command
VALIDATION_CMD="$CLAUDE_CODE_CMD validate"

if [ -f "$CONFIG_FILE" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --config $CONFIG_FILE"
fi

if [ "$FAST_MODE" = "true" ] && [ "$IS_PROTECTED" != "true" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --fast"
fi

if [ "$QUIET_MODE" = "true" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --quiet"
fi

if [ "$STRICT_MODE" = "true" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --strict"
fi

# Add pre-push specific flags
VALIDATION_CMD="$VALIDATION_CMD --hook-type pre-push --branch $CURRENT_BRANCH"

if [ "$IS_PROTECTED" = "true" ]; then
    VALIDATION_CMD="$VALIDATION_CMD --protected-branch"
fi

print_status "üõ°Ô∏è  Running Claude Code security validation..."

if [ "$IS_PROTECTED" = "true" ]; then
    print_critical "üîí Protected branch validation in progress..."
fi

# Execute validation with proper error handling
VALIDATION_START=$(date +%s)

if eval "$VALIDATION_CMD"; then
    VALIDATION_END=$(date +%s)
    VALIDATION_TIME=$((VALIDATION_END - VALIDATION_START))
    
    print_success ""
    print_success "‚úÖ SECURITY VALIDATION PASSED!"
    
    if [ "$IS_PROTECTED" = "true" ]; then
        print_success "üîí Protected branch security requirements satisfied"
    fi
    
    print_success ""
    print_status "üìà Validation completed in ${VALIDATION_TIME}s"
    
    # Additional success information
    if [ -f ".claude-code-validation-report.json" ]; then
        if command -v jq &> /dev/null; then
            RULES_PROCESSED=$(jq -r '.performance.rulesProcessed // "unknown"' .claude-code-validation-report.json 2>/dev/null || echo "unknown")
            ERROR_COUNT=$(jq -r '.errors | length' .claude-code-validation-report.json 2>/dev/null || echo "0")
            WARNING_COUNT=$(jq -r '.warnings | length' .claude-code-validation-report.json 2>/dev/null || echo "0")
            
            print_status "üìã Security rules processed: $RULES_PROCESSED"
            if [ "$WARNING_COUNT" != "0" ] && [ "$WARNING_COUNT" != "unknown" ]; then
                print_status "‚ö†Ô∏è  Warnings resolved: $WARNING_COUNT"
            fi
        fi
    fi
    
    print_success ""
    print_success "üöÄ Your push meets all security requirements!"
    
    if [ "$IS_PROTECTED" = "true" ]; then
        print_success "üîí Protected branch push authorized"
    fi
    
    print_success "   Proceeding with push to remote..."
    print_success ""
    
    exit 0
else
    VALIDATION_EXIT_CODE=$?
    VALIDATION_END=$(date +%s)
    VALIDATION_TIME=$((VALIDATION_END - VALIDATION_START))
    
    print_error ""
    print_error "‚ùå SECURITY VALIDATION FAILED!"
    
    if [ "$IS_PROTECTED" = "true" ]; then
        print_critical "üîí PROTECTED BRANCH PUSH BLOCKED!"
    fi
    
    print_error ""
    print_error "üö® The pre-push operation has been blocked due to security policy violations."
    print_error ""
    
    # Show validation time even on failure
    print_error "‚è±Ô∏è  Validation completed in ${VALIDATION_TIME}s"
    
    # Provide detailed failure information
    if [ -f ".claude-code-validation-report.json" ]; then
        if command -v jq &> /dev/null; then
            ERROR_COUNT=$(jq -r '.errors | length' .claude-code-validation-report.json 2>/dev/null || echo "unknown")
            WARNING_COUNT=$(jq -r '.warnings | length' .claude-code-validation-report.json 2>/dev/null || echo "unknown")
            CONFLICT_COUNT=$(jq -r '.conflicts | length' .claude-code-validation-report.json 2>/dev/null || echo "unknown")
            
            if [ "$ERROR_COUNT" != "unknown" ] && [ "$ERROR_COUNT" != "null" ] && [ "$ERROR_COUNT" != "0" ]; then
                print_error "üî• Critical errors: $ERROR_COUNT"
            fi
            if [ "$WARNING_COUNT" != "unknown" ] && [ "$WARNING_COUNT" != "null" ] && [ "$WARNING_COUNT" != "0" ]; then
                print_error "‚ö†Ô∏è  Warnings: $WARNING_COUNT"
            fi
            if [ "$CONFLICT_COUNT" != "unknown" ] && [ "$CONFLICT_COUNT" != "null" ] && [ "$CONFLICT_COUNT" != "0" ]; then
                print_error "‚öîÔ∏è  Rule conflicts: $CONFLICT_COUNT"
            fi
        fi
    fi
    
    print_error ""
    print_error "üìã TO FIX THIS ISSUE:"
    print_error "   1. Review the security errors shown above"
    print_error "   2. Update your .claude-code.json configuration"
    print_error "   3. Resolve any rule conflicts"
    print_error "   4. Test locally: claude-code validate"
    print_error "   5. Try pushing again"
    print_error ""
    
    if [ "$IS_PROTECTED" = "true" ]; then
        print_critical "üîí PROTECTED BRANCH REQUIREMENTS:"
        print_critical "   ‚Ä¢ All security errors must be resolved"
        print_critical "   ‚Ä¢ No rule conflicts allowed"
        print_critical "   ‚Ä¢ Enhanced validation must pass"
        print_critical ""
    fi
    
    print_error "üìö FOR HELP:"
    print_error "   ‚Ä¢ Run: claude-code validate --help"
    print_error "   ‚Ä¢ Check documentation: https://claude-code-docs.com"
    print_error "   ‚Ä¢ Review configuration: cat .claude-code.json"
    print_error "   ‚Ä¢ Test validation: claude-code validate --dry-run"
    print_error ""
    
    if [ "$IS_PROTECTED" != "true" ]; then
        print_error "üö® EMERGENCY BYPASS (use with extreme caution):"
        print_error "   git push $BYPASS_FLAG"
        print_error ""
        print_warning "‚ö†Ô∏è  WARNING: Bypassing security validation may introduce vulnerabilities!"
    else
        print_critical "üîí PROTECTED BRANCH: Emergency bypass is disabled for security"
        print_critical "All security issues must be resolved before pushing"
    fi
    
    print_error ""
    
    exit $VALIDATION_EXIT_CODE
fi